{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/github/ifood-frontend-test/ifood-frontend/src/pages/Dashboard/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { FaSpotify } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport Playlist from \"../Playlist/index\";\nimport Filter from \"../Filter/index\";\nimport { Container, Wrapper } from \"./styles\";\n\nfunction Dashboard() {\n  const {\n    hash\n  } = useLocation();\n  const [playlists, setPlaylists] = useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [selectedLocale, setSelectedLocale] = useState(\"pt_BR\");\n  const [selectedCountry, setSelectedCountry] = useState(\"BR\");\n  const [filteredName, setFilteredName] = useState(\"\"); // const [selectedDateAndHour, setSelectedDateAndHour] = useState(new Date());\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  useEffect(() => {\n    const firstReplace = hash.replace(\"#access_token=\", \"\");\n    const secondReplace = firstReplace.replace(\"&token_type=Bearer&expires_in=3600&state=123\", \"\");\n    axios.get(`https://api.spotify.com/v1/browse/featured-playlists?country=${selectedCountry}&locale=${selectedLocale}&timestamp=2015-05-18T06:44:32&limit=${rowsPerPage}`, {\n      headers: {\n        Authorization: \"Bearer \" + secondReplace\n      }\n    }).then(response => {\n      console.log(response.data);\n      const filteredNamePlaylists = response.data.playlists.items.filter(item => {\n        if (filteredName) {\n          return item.name === filteredName;\n        }\n      });\n      console.log(\"setPlaylists\", filteredNamePlaylists);\n      filteredNamePlaylists.length ? setPlaylists(filteredNamePlaylists) : setPlaylists(response.data);\n    }).catch(err => {\n      toast.error(err.response.data.error.message);\n    });\n  }, [filteredName, hash, rowsPerPage, selectedCountry, selectedLocale]);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FaSpotify, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Spotifood\")), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Filter, {\n    selectedLocale: selectedLocale,\n    setSelectedLocale: setSelectedLocale,\n    selectedCountry: selectedCountry,\n    setSelectedCountry: setSelectedCountry,\n    filteredName: filteredName,\n    setFilteredName: setFilteredName // selectedDateAndHour={selectedDateAndHour}\n    // setSelectedDateAndHour={setSelectedDateAndHour}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Playlist, {\n    page: page,\n    rowsPerPage: rowsPerPage,\n    onChangePage: handleChangePage,\n    onChangeRowPerPage: handleChangeRowsPerPage,\n    playlists: playlists,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/home/gabriel/github/ifood-frontend-test/ifood-frontend/src/pages/Dashboard/index.js"],"names":["React","useEffect","useState","useLocation","toast","FaSpotify","axios","Playlist","Filter","Container","Wrapper","Dashboard","hash","playlists","setPlaylists","page","setPage","rowsPerPage","setRowsPerPage","selectedLocale","setSelectedLocale","selectedCountry","setSelectedCountry","filteredName","setFilteredName","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","firstReplace","replace","secondReplace","get","headers","Authorization","then","response","console","log","data","filteredNamePlaylists","items","filter","item","name","length","catch","err","error","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { FaSpotify } from \"react-icons/fa\";\n\nimport axios from \"axios\";\nimport Playlist from \"../Playlist/index\";\nimport Filter from \"../Filter/index\";\n\nimport { Container, Wrapper } from \"./styles\";\n\nfunction Dashboard() {\n  const { hash } = useLocation();\n  const [playlists, setPlaylists] = useState([]);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const [selectedLocale, setSelectedLocale] = useState(\"pt_BR\");\n  const [selectedCountry, setSelectedCountry] = useState(\"BR\");\n  const [filteredName, setFilteredName] = useState(\"\");\n  // const [selectedDateAndHour, setSelectedDateAndHour] = useState(new Date());\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  useEffect(() => {\n    const firstReplace = hash.replace(\"#access_token=\", \"\");\n    const secondReplace = firstReplace.replace(\n      \"&token_type=Bearer&expires_in=3600&state=123\",\n      \"\"\n    );\n\n    axios\n      .get(\n        `https://api.spotify.com/v1/browse/featured-playlists?country=${selectedCountry}&locale=${selectedLocale}&timestamp=2015-05-18T06:44:32&limit=${rowsPerPage}`,\n        {\n          headers: {\n            Authorization: \"Bearer \" + secondReplace,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        const filteredNamePlaylists = response.data.playlists.items.filter(\n          (item) => {\n            if (filteredName) {\n              return item.name === filteredName;\n            }\n          }\n        );\n        console.log(\"setPlaylists\", filteredNamePlaylists);\n        filteredNamePlaylists.length\n          ? setPlaylists(filteredNamePlaylists)\n          : setPlaylists(response.data);\n      })\n      .catch((err) => {\n        toast.error(err.response.data.error.message);\n      });\n  }, [filteredName, hash, rowsPerPage, selectedCountry, selectedLocale]);\n\n  return (\n    <Wrapper>\n      <header>\n        <FaSpotify />\n        <h2>Spotifood</h2>\n      </header>\n      <Container>\n        <nav>\n          <Filter\n            selectedLocale={selectedLocale}\n            setSelectedLocale={setSelectedLocale}\n            selectedCountry={selectedCountry}\n            setSelectedCountry={setSelectedCountry}\n            filteredName={filteredName}\n            setFilteredName={setFilteredName}\n            // selectedDateAndHour={selectedDateAndHour}\n            // setSelectedDateAndHour={setSelectedDateAndHour}\n          />\n        </nav>\n        <section>\n          <Playlist\n            page={page}\n            rowsPerPage={rowsPerPage}\n            onChangePage={handleChangePage}\n            onChangeRowPerPage={handleChangeRowsPerPage}\n            playlists={playlists}\n          />\n        </section>\n      </Container>\n    </Wrapper>\n  );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}